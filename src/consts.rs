#![allow(dead_code)]

use fluorite_arm::Addr;

pub const WORK_RAM_SIZE: usize = 256 * 1024;
pub const INTERNAL_RAM_SIZE: usize = 32 * 1024;

pub const BIOS_ADDR: u32 = 0x0000_0000;
pub const EWRAM_ADDR: u32 = 0x0200_0000;
pub const IWRAM_ADDR: u32 = 0x0300_0000;
pub const IOMEM_ADDR: u32 = 0x0400_0000;
pub const PALRAM_ADDR: u32 = 0x0500_0000;
pub const VRAM_ADDR: u32 = 0x0600_0000;
pub const OAM_ADDR: u32 = 0x0700_0000;
pub const GAMEPAK_WS0_LO: u32 = 0x0800_0000;
pub const GAMEPAK_WS0_HI: u32 = 0x0900_0000;
pub const GAMEPAK_WS1_LO: u32 = 0x0A00_0000;
pub const GAMEPAK_WS1_HI: u32 = 0x0B00_0000;
pub const GAMEPAK_WS2_LO: u32 = 0x0C00_0000;
pub const GAMEPAK_WS2_HI: u32 = 0x0D00_0000;
pub const SRAM_LO: u32 = 0x0E00_0000;
pub const SRAM_HI: u32 = 0x0F00_0000;

pub const PAGE_BIOS: usize = (BIOS_ADDR >> 24) as usize;
pub const PAGE_EWRAM: usize = (EWRAM_ADDR >> 24) as usize;
pub const PAGE_IWRAM: usize = (IWRAM_ADDR >> 24) as usize;
pub const PAGE_IOMEM: usize = (IOMEM_ADDR >> 24) as usize;
pub const PAGE_PALRAM: usize = (PALRAM_ADDR >> 24) as usize;
pub const PAGE_VRAM: usize = (VRAM_ADDR >> 24) as usize;
pub const PAGE_OAM: usize = (OAM_ADDR >> 24) as usize;
pub const PAGE_GAMEPAK_WS0: usize = (GAMEPAK_WS0_LO >> 24) as usize;
pub const PAGE_GAMEPAK_WS1: usize = (GAMEPAK_WS1_LO >> 24) as usize;
pub const PAGE_GAMEPAK_WS2: usize = (GAMEPAK_WS2_LO >> 24) as usize;
pub const PAGE_SRAM_LO: usize = (SRAM_LO >> 24) as usize;
pub const PAGE_SRAM_HI: usize = (SRAM_HI >> 24) as usize;

pub const VIDEO_RAM_SIZE: usize = 128 * 1024;
pub const PALETTE_RAM_SIZE: usize = 1 * 1024;
pub const OAM_SIZE: usize = 1 * 1024;

pub const DISPLAY_WIDTH: usize = 240;
pub const DISPLAY_HEIGHT: usize = 160;
pub const VBLANK_LINES: usize = 68;

pub const CYCLES_PIXEL: usize = 4;
pub const CYCLES_HDRAW: usize = 960 + 46;
pub const CYCLES_HBLANK: usize = 272 - 46;
pub const CYCLES_SCANLINE: usize = 1232;
pub const CYCLES_VDRAW: usize = 197120;
pub const CYCLES_VBLANK: usize = 83776;

pub const CYCLES_FULL_REFRESH: usize = 280896;

pub const TILE_SIZE: u32 = 0x20;

pub const VRAM_OBJ_TILES_START_TEXT: u32 = 0x1_0000;
pub const VRAM_OBJ_TILES_START_BITMAP: u32 = 0x1_4000;


pub const IO_BASE: Addr = 0x0400_0000;

pub const REG_DISPCNT: Addr = 0x0400_0000;      //  2    R/W    LCD Control
pub const REG_GREENSWAP: Addr = 0x0400_0002;    //  2    R/W    Undocumented - Green Swap
pub const REG_DISPSTAT: Addr = 0x0400_0004;     //  2    R/W    General LCD Status (STAT,LYC)
pub const REG_VCOUNT: Addr = 0x0400_0006;       //  2    R      Vertical Counter (LY)
pub const REG_BG0CNT: Addr = 0x0400_0008;       //  2    R/W    BG0 Control
pub const REG_BG1CNT: Addr = 0x0400_000A;       //  2    R/W    BG1 Control
pub const REG_BG2CNT: Addr = 0x0400_000C;       //  2    R/W    BG2 Control
pub const REG_BG3CNT: Addr = 0x0400_000E;       //  2    R/W    BG3 Control
pub const REG_BG0HOFS: Addr = 0x0400_0010;      //  2    W      BG0 X-Offset
pub const REG_BG0VOFS: Addr = 0x0400_0012;      //  2    W      BG0 Y-Offset
pub const REG_BG1HOFS: Addr = 0x0400_0014;      //  2    W      BG1 X-Offset
pub const REG_BG1VOFS: Addr = 0x0400_0016;      //  2    W      BG1 Y-Offset
pub const REG_BG2HOFS: Addr = 0x0400_0018;      //  2    W      BG2 X-Offset
pub const REG_BG2VOFS: Addr = 0x0400_001A;      //  2    W      BG2 Y-Offset
pub const REG_BG3HOFS: Addr = 0x0400_001C;      //  2    W      BG3 X-Offset
pub const REG_BG3VOFS: Addr = 0x0400_001E;      //  2    W      BG3 Y-Offset
pub const REG_BG2PA: Addr = 0x0400_0020;        //  2    W      BG2 Rotation/Scaling Parameter A (dx)
pub const REG_BG2PB: Addr = 0x0400_0022;        //  2    W      BG2 Rotation/Scaling Parameter B (dmx)
pub const REG_BG2PC: Addr = 0x0400_0024;        //  2    W      BG2 Rotation/Scaling Parameter C (dy)
pub const REG_BG2PD: Addr = 0x0400_0026;        //  2    W      BG2 Rotation/Scaling Parameter D (dmy)
pub const REG_BG2X_L: Addr = 0x0400_0028;       //  4    W      BG2 Reference Point X-Coordinate, lower 16 bit
pub const REG_BG2X_H: Addr = 0x0400_002A;       //  4    W      BG2 Reference Point X-Coordinate, upper 16 bit
pub const REG_BG2Y_L: Addr = 0x0400_002C;       //  4    W      BG2 Reference Point Y-Coordinate, lower 16 bit
pub const REG_BG2Y_H: Addr = 0x0400_002E;       //  4    W      BG2 Reference Point Y-Coordinate, upper 16 bit
pub const REG_BG3PA: Addr = 0x0400_0030;        //  2    W      BG3 Rotation/Scaling Parameter A (dx)
pub const REG_BG3PB: Addr = 0x0400_0032;        //  2    W      BG3 Rotation/Scaling Parameter B (dmx)
pub const REG_BG3PC: Addr = 0x0400_0034;        //  2    W      BG3 Rotation/Scaling Parameter C (dy)
pub const REG_BG3PD: Addr = 0x0400_0036;        //  2    W      BG3 Rotation/Scaling Parameter D (dmy)
pub const REG_BG3X_L: Addr = 0x0400_0038;       //  4    W      BG3 Reference Point X-Coordinate, lower 16 bit
pub const REG_BG3X_H: Addr = 0x0400_003A;       //  4    W      BG3 Reference Point X-Coordinate, upper 16 bit
pub const REG_BG3Y_L: Addr = 0x0400_003C;       //  4    W      BG3 Reference Point Y-Coordinate, lower 16 bit
pub const REG_BG3Y_H: Addr = 0x0400_003E;       //  4    W      BG3 Reference Point Y-Coordinate, upper 16 bit
pub const REG_WIN0H: Addr = 0x0400_0040;        //  2    W      Window 0 Horizontal Dimensions
pub const REG_WIN1H: Addr = 0x0400_0042;        //  2    W      Window 1 Horizontal Dimensions
pub const REG_WIN0V: Addr = 0x0400_0044;        //  2    W      Window 0 Vertical Dimensions
pub const REG_WIN1V: Addr = 0x0400_0046;        //  2    W      Window 1 Vertical Dimensions
pub const REG_WININ: Addr = 0x0400_0048;        //  2    R/W    Inside of Window 0 and 1
pub const REG_WINOUT: Addr = 0x0400_004A;       //  2    R/W    Inside of OBJ Window & Outside of Windows
pub const REG_MOSAIC: Addr = 0x0400_004C;       //  2    W      Mosaic Size
pub const REG_BLDCNT: Addr = 0x0400_0050;       //  2    R/W    Color Special Effects Selection
pub const REG_BLDALPHA: Addr = 0x0400_0052;     //  2    R/W    Alpha Blending Coefficients
pub const REG_BLDY: Addr = 0x0400_0054;         //  2    W      Brightness (Fade-In/Out) Coefficient
pub const SOUND_BASE: Addr = REG_SOUND1CNT_L;
pub const REG_SOUND1CNT_L: Addr = 0x0400_0060;  //  2  R/W      Channel 1 Sweep register       (NR10)
pub const REG_SOUND1CNT_H: Addr = 0x0400_0062;  //  2  R/W      Channel 1 Duty/Length/Envelope (NR11, NR12)
pub const REG_SOUND1CNT_X: Addr = 0x0400_0064;  //  2  R/W      Channel 1 Frequency/Control    (NR13, NR14)
pub const REG_SOUND2CNT_L: Addr = 0x0400_0068;  //  2  R/W      Channel 2 Duty/Length/Envelope (NR21, NR22)
pub const REG_SOUND2CNT_H: Addr = 0x0400_006C;  //  2  R/W      Channel 2 Frequency/Control    (NR23, NR24)
pub const REG_SOUND3CNT_L: Addr = 0x0400_0070;  //  2  R/W      Channel 3 Stop/Wave RAM select (NR30)
pub const REG_SOUND3CNT_H: Addr = 0x0400_0072;  //  2  R/W      Channel 3 Length/Volume        (NR31, NR32)
pub const REG_SOUND3CNT_X: Addr = 0x0400_0074;  //  2  R/W      Channel 3 Frequency/Control    (NR33, NR34)
pub const REG_SOUND4CNT_L: Addr = 0x0400_0078;  //  2  R/W      Channel 4 Length/Envelope      (NR41, NR42)
pub const REG_SOUND4CNT_H: Addr = 0x0400_007C;  //  2  R/W      Channel 4 Frequency/Control    (NR43, NR44)
pub const REG_SOUNDCNT_L: Addr = 0x0400_0080;   //  2  R/W      Control Stereo/Volume/Enable   (NR50, NR51)
pub const REG_SOUNDCNT_H: Addr = 0x0400_0082;   //  2  R/W      Control Mixing/DMA Control
pub const REG_SOUNDCNT_X: Addr = 0x0400_0084;   //  2  R/W      Control Sound on/off           (NR52)
pub const REG_SOUNDBIAS: Addr = 0x0400_0088;    //  2  BIOS     Sound PWM Control
pub const REG_WAVE_RAM: Addr = 0x0400_0090;     //              Channel 3 Wave Pattern RAM (2 banks!!)
pub const REG_FIFO_A: Addr = 0x0400_00A0;       //  4    W      Channel A FIFO, Data 0-3
pub const REG_FIFO_B: Addr = 0x0400_00A4;       //  4    W      Channel B FIFO, Data 0-3
pub const SOUND_END: Addr = REG_FIFO_B+4;
pub const DMA_BASE: Addr = REG_DMA0SAD;
pub const REG_DMA0SAD: Addr = 0x0400_00B0;      //  4    W      DMA 0 Source Address
pub const REG_DMA0DAD: Addr = 0x0400_00B4;      //  4    W      DMA 0 Destination Address
pub const REG_DMA0CNT_L: Addr = 0x0400_00B8;    //  2    W      DMA 0 Word Count
pub const REG_DMA0CNT_H: Addr = 0x0400_00BA;    //  2    R/W    DMA 0 Control
pub const REG_DMA1SAD: Addr = 0x0400_00BC;      //  4    W      DMA 1 Source Address
pub const REG_DMA1DAD: Addr = 0x0400_00C0;      //  4    W      DMA 1 Destination Address
pub const REG_DMA1CNT_L: Addr = 0x0400_00C4;    //  2    W      DMA 1 Word Count
pub const REG_DMA1CNT_H: Addr = 0x0400_00C6;    //  2    R/W    DMA 1 Control
pub const REG_DMA2SAD: Addr = 0x0400_00C8;      //  4    W      DMA 2 Source Address
pub const REG_DMA2DAD: Addr = 0x0400_00CC;      //  4    W      DMA 2 Destination Address
pub const REG_DMA2CNT_L: Addr = 0x0400_00D0;    //  2    W      DMA 2 Word Count
pub const REG_DMA2CNT_H: Addr = 0x0400_00D2;    //  2    R/W    DMA 2 Control
pub const REG_DMA3SAD: Addr = 0x0400_00D4;      //  4    W      DMA 3 Source Address
pub const REG_DMA3DAD: Addr = 0x0400_00D8;      //  4    W      DMA 3 Destination Address
pub const REG_DMA3CNT_L: Addr = 0x0400_00DC;    //  2    W      DMA 3 Word Count
pub const REG_DMA3CNT_H: Addr = 0x0400_00DE;    //  2    R/W    DMA 3 Control
pub const REG_TM0CNT_L: Addr = 0x0400_0100;     //  2    R/W    Timer 0 Counter/Reload
pub const REG_TM0CNT_H: Addr = 0x0400_0102;     //  2    R/W    Timer 0 Control
pub const REG_TM1CNT_L: Addr = 0x0400_0104;     //  2    R/W    Timer 1 Counter/Reload
pub const REG_TM1CNT_H: Addr = 0x0400_0106;     //  2    R/W    Timer 1 Control
pub const REG_TM2CNT_L: Addr = 0x0400_0108;     //  2    R/W    Timer 2 Counter/Reload
pub const REG_TM2CNT_H: Addr = 0x0400_010A;     //  2    R/W    Timer 2 Control
pub const REG_TM3CNT_L: Addr = 0x0400_010C;     //  2    R/W    Timer 3 Counter/Reload
pub const REG_TM3CNT_H: Addr = 0x0400_010E;     //  2    R/W    Timer 3 Control
pub const REG_SIODATA32: Addr = 0x0400_0120;    //  4    R/W    SIO Data (Normal-32bit Mode; shared with below)
pub const REG_SIOMULTI0: Addr = 0x0400_0120;    //  2    R/W    SIO Data 0 (Parent)    (Multi-Player Mode)
pub const REG_SIOMULTI1: Addr = 0x0400_0122;    //  2    R/W    SIO Data 1 (1st Child) (Multi-Player Mode)
pub const REG_SIOMULTI2: Addr = 0x0400_0124;    //  2    R/W    SIO Data 2 (2nd Child) (Multi-Player Mode)
pub const REG_SIOMULTI3: Addr = 0x0400_0126;    //  2    R/W    SIO Data 3 (3rd Child) (Multi-Player Mode)
pub const REG_SIOCNT: Addr = 0x0400_0128;       //  2    R/W    SIO Control Register
pub const REG_SIOMLT_SEND: Addr = 0x0400_012A;  //  2    R/W    SIO Data (Local of MultiPlayer; shared below)
pub const REG_SIODATA8: Addr = 0x0400_012A;     //  2    R/W    SIO Data (Normal-8bit and UART Mode)
pub const REG_KEYINPUT: Addr = 0x0400_0130;     //  2    R      Key Status
pub const REG_KEYCNT: Addr = 0x0400_0132;       //  2    R/W    Key Interrupt Control
pub const REG_RCNT: Addr = 0x0400_0134;         //  2    R/W    SIO Mode Select/General Purpose Data
pub const REG_IR: Addr = 0x0400_0136;           //  -    -      Ancient - Infrared Register (Prototypes only)
pub const REG_JOYCNT: Addr = 0x0400_0140;       //  2    R/W    SIO JOY Bus Control
pub const REG_JOY_RECV: Addr = 0x0400_0150;     //  4    R/W    SIO JOY Bus Receive Data
pub const REG_JOY_TRANS: Addr = 0x0400_0154;    //  4    R/W    SIO JOY Bus Transmit Data
pub const REG_JOYSTAT: Addr = 0x0400_0158;      //  2    R/?    SIO JOY Bus Receive Status
pub const REG_IE: Addr = 0x0400_0200;           //  2    R/W    Interrupt Enable Register
pub const REG_IF: Addr = 0x0400_0202;           //  2    R/W    Interrupt Request Flags / IRQ Acknowledge
pub const REG_WAITCNT: Addr = 0x0400_0204;      //  2    R/W    Game Pak Waitstate Control
pub const REG_IME: Addr = 0x0400_0208;          //  2    R/W    Interrupt Master Enable Register
pub const REG_POSTFLG: Addr = 0x0400_0300;      //  1    R/W    Undocumented - Post Boot Flag
pub const REG_HALTCNT: Addr = 0x0400_0301;      //  1    W      Undocumented - Power Down Control
pub const REG_DEBUG_STRING: Addr = 0x04FF_F600;
pub const REG_DEBUG_FLAGS: Addr = 0x04FF_F700;
pub const REG_DEBUG_ENABLE: Addr = 0x04FF_F780;